#cv2 RETR_EXTERNAL 이랑 cv2.RETR_TREE랑 차이점 찾기


import cv2, sys
from matplotlib import pyplot as plt
import numpy as np
import matplotlib.pyplot as plt

#이미지를 불러옴
image = cv2.imread("C:/code/test1.jpeg") #이미지를 불러옴
image_gray = cv2.imread('C:/code/test1.jpeg', cv2.IMREAD_GRAYSCALE) #이미지를 그레이스케일로 지정
img1 = np.zeros((512,512), np.uint8)

#b,g,r = cv2.split(image)
#image2 = cv2.merge([r, g, b])

#이미지를 원본으로 보여주고 그레이스케일로 한번보여줌
cv2.imshow('image', image)
cv2.imshow('image_gray', image_gray)

#가우시안 필터에 집어넣음
blur = cv2.GaussianBlur(image_gray, ksize = (3,3), sigmaX = 0)
ret, thresh1 =  cv2.threshold(blur, 127, 255, cv2.THRESH_BINARY)

#cv2의 Canny를 사용하여 외각선 검출
edged = cv2.Canny(blur, 10, 250)
cv2.imshow('Edged', edged)

#이미지의 색깔을 다빼고 외각선만 검출함
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7,7))
closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)
cv2.imshow('closed', closed)

#외각선 그리기
contours, _ = cv2.findContours(closed.copy(),cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
total = 0

contours_image = cv2.drawContours(image, contours, -1, (0, 255, 0),1)
cv2.imshow('contours_image', contours_image)


contours_xy = np.array(contours)
contours_xy.shape

#사물 외에 싹 다 검은색으로 지정
cnts, hiers = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
canvas = np.zeros_like(image)
n = len(cnts)
hiers = hiers[0]

for i in range(n):
    if hiers[i][3] != -1:
        continue
    # 그리기
    cv2.drawContours(canvas, cnts, i,  (0,255,0), -1, cv2.LINE_AA)
    
#이미지를 외각선에 맞춰서 삭제
cv2.imwrite("C:/code/test.jpeg", canvas)
cv2.imshow("canvas", canvas)

#사물 외에 배경 삭제 (그랩컷)

#이미지 RGB로 변환
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

#사각형 좌표: 시작점의 x,y,넢이, 너비
rectangle = (83, 13, 220, 360)

#초기 마스크 생성
mask = np.zeros(image_rgb.shape[:2], np.uint8)

#grabCut에 사용할 임시 배열 생성
bgdModel = np.zeros((1,65), np.float64)
fgdModel = np.zeros((1,65), np.float64)

#grabCut 실행
cv2.grabCut(image_rgb, mask, rectangle, bgdModel, fgdModel, 5, cv2.GC_INIT_WITH_RECT)
#배경인 곳은 0, 그외에는 1로 설정한 마스크 생성
mask_2 = np.where((mask == 2) | (mask==0), 0, 1).astype('uint8')

# 이미지에 새로운 마스크를 곱행 배경을 제외
image_rgb_nobg = image_rgb * mask_2[:, :, np.newaxis]

# plot
plt.imshow(image_rgb_nobg)
plt.show()


#y의 min과 max 찾기

x_min, x_max = 0,0
value = list()
for i in range(len(contours_xy)):
    for j in range(len(contours_xy[i])):
        value.append(contours_xy[i][j][0][0])
        x_min = min(value)
        x_max = max(value)
        
print(x_min)
print(x_max)

y_min, y_max = 0,0
value = list()
for i in range(len(contours_xy)):
    for j in range(len(contours_xy[i])):
        value.append(contours_xy[i][j][0][1]) #네번째 괄호가 0일때 x의 값
        y_min = min(value)
        y_max = max(value)
        
print(y_min)
print(y_max)

x = x_min
y = y_min
w = x_max - x_min
h = y_max - y_min

#grabcut으로 잘라낸 이미지를 출력
img_trim = image[y:y+h, x:x+w]
cv2.imwrite('C:/code/test.jpeg', img_trim)
org_image = cv2.imread('C:/code/test.jpeg')

cv2.imshow('C:/code/test.jpeg',org_image)
