import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt

from keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler


Data = pd.read_csv('./bodyPerformance.csv')

print(Data)

train_X = Data[['age', 'height_cm', 'weight_kg']]
train_Y = Data[['squat']]

print(train_X)
print('############################################')
print(train_Y)

scaler_x=MinMaxScaler()
scaler_x.fit(train_X)
Normalization_data_x=scaler_x.transform(train_X)

train_X = pd.DataFrame(data=Normalization_data_x)

scaler_y=MinMaxScaler()
scaler_y.fit(train_Y)
train_Normalization_data_y=scaler_y.transform(train_Y)

train_Y = pd.DataFrame(data=train_Normalization_data_y)

train_x, test_x, train_y, test_y = train_test_split(train_X, train_Y, test_size = 0.1, random_state=0, shuffle = True)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation = 'sigmoid', input_shape = (train_x.shape)),
    tf.keras.layers.Dense(64, activation = "sigmoid"),
    tf.keras.layers.Dense(32, activation = "sigmoid"),
    tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)

model.compile(optimizer = optimizer, loss = 'mse', metrics = [tf.keras.metrics.RootMeanSquaredError()])

model.summary()

early_stopping = EarlyStopping(monitor = 'val_root_mean_squared_error', min_delta = 0.00001, patience = 50, verbose =1, mode = 'auto', baseline = None, restore_best_weights = True)
history = model.fit(train_x, train_y, epochs = 3000, callbacks=(early_stopping))
print(train_x.shape)
print("#################################################")
print(train_y.shape)

predict_check = model.predict(test_x)

predict_check = scaler_y.inverse_transform(predict_check)
test_y = scaler_y.inverse_transform(test_y)
print(predict_check)
print(test_y)
