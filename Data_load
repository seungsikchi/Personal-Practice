from glob import glob
import numpy as np
import os
from sklearn.utils import shuffle

class dataSet():
    
    #초기함수
    def __init__(self, path):
        self.path = path
        self.x = []
        self.original = []

        #in splitData
        self.train_x = []
        self.test_x = []

    def imageread(self, path): #이미지를 불러오는 함수
        x = Image.open(path)
        y = path.split('\\')[-2]
        #.\\dataset\\1\\1.jpg
        # print(x,y)
        return x, int(y)-1

    def getFilesInFolder(self, path): # 이미지를 불러와 리스트에 넣는 함수
        result = [ y for x in os.walk(path) for y in glob(os.path.join(x[0], '*.*'))]
        

        for localPath in result:
            img = self.imageread(localPath)
            self.x.append(img) 
            self.original.append(img)
        return self.x, self.original
    
    def resizeAll(self, X, dim): #이미지의 크기를 변경하는 함수
        
        resizedX = []

        N = len(X)

        for i in range(N):
            resized = X[i].resize((dim, dim))
            npImg = np.array(resized)

            if len(npImg.shape) == 3:
                resizedX.append(npImg)
           # print(npImg.shape)
        
        self.x = np.array(resizedX)

    def split_Dataset(self, ratio): #데이터를 섞는 함수
        split_x = []

        split_x = np.array(self.x)
        print(split_x)
        train_idx = int(len(split_x) * ratio)

        self.train_x = split_x[:train_idx, :, :]

        self.test_x = split_x[train_idx:, :, :]

        return self.train_x, self.test_x

    def shuffleData(self, x):
        x = np.array(x)
        x = shuffle(x)
        return x
        
    def normZT(self, x):
        x = (x - np.mean(x) / np.std(x))
        return x

    def NormalizeMM(self, x):
        maxvalue = np.max(x)  # m_Voxel의 가장 큰 값을 뽑아낸다.
        minvalue = np.min(x)  # m_Voxel의 가장 작은 값을 뽑아낸다.

        diff = maxvalue - minvalue
        img = (x - minvalue)/diff

        return img

    def DeNormalizeMM(self, x):
        original = np.array(self.original)

        print(type(original))
        maxvalue = np.max(original)
        minvalue = np.min(original)

        diff = maxvalue - minvalue
        img = (x * diff) + minvalue
        return img
    
    def load_data(self,ratio): #위에 함수들을 실행시켜 이미지를 불러오고 전처리까지 끝내는 함수
        self.getFilesInFolder(self.path) #전체 데이터 가져옴
        self.resizeAll(self.x, dim) # numpy화 되어 있음
        self.x = self.shuffleData(self.x)
        self.split_Dataset(ratio)
        self.train_x = self.NormalizeMM(self.train_x)

        return self.train_x

